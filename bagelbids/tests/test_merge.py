"""
Test the command line interface function to merge a BIDS and demographic json file.
"""
import json
from pathlib import Path

import pytest
from click.testing import CliRunner

from bagelbids.merge import cli, get_id, merge_on_subject, merge_json


@pytest.fixture
def runner():
    return CliRunner()


@pytest.fixture
def bids_json():
    return {'hasSamples': [
        {'identifier': 1, 'extra_key': 'one'},
        {'identifier': 2, 'extra_key': 'two'}
        ]
    }
    
    
@pytest.fixture
def demo_json():
    return {'subjects': [
        {'id': 1, 'special_key': 'one'},
        {'id': 2, 'special_key': 'two'}
        ]
    }


@pytest.fixture
def bids_json_path(bids_json, tmp_path):
    """Creates a temporary example json file that looks like a json file that could be
    generated by bagelbids from a BIDS directory.
    """
    json_path = tmp_path / "bids_json.json"
    with open(json_path, 'w') as f:
        f.write(json.dumps(bids_json))
    return json_path


@pytest.fixture
def demo_json_path(demo_json, tmp_path):
    """Creates a temporary example json file that looks like a file that could be generated
    by the neurobagel annotator from a participants.tsv file
    """
    json_path = tmp_path / "demo_json.json"
    with open(json_path, 'w') as f:
        f.write(json.dumps(demo_json))
    return json_path


def test_merge_takes_input_arguments(runner, bids_json_path, demo_json_path, tmp_path):
    result = runner.invoke(cli, ["--bids_path", bids_json_path,
                                 "--demo_path", demo_json_path,
                                 "--out_path", tmp_path / "my_output.jsonld"])
    assert result.exit_code == 0
    
    
def test_get_id_unsupported_mode_fails():
    with pytest.raises(NotImplementedError):
        get_id({}, 'does_not_exist_mode')
        
        
def test_get_id(bids_json, demo_json):
    target_bids = {1: {'identifier': 1, 'extra_key': 'one'},
                   2: {'identifier': 2, 'extra_key': 'two'}}
    target_demo = {1: {'identifier': 1, 'special_key': 'one'},
                   2: {'identifier': 2, 'special_key': 'two'}}
    result_bids = get_id(bids_json, mode='bids')
    result_demo = get_id(demo_json, mode='demo')
    assert result_bids == target_bids
    assert result_demo == target_demo


def test_merge_subject_lists():
    # I give two identifier indexed dicts
    # and I expect to get a single, merged dict back that contains both
    bids_example = {1: {'identifier': 1, 'extra_key': 1},
                    2: {'identifier': 2, 'extra_key': 2}}
    demo_example = {1: {'identifier': 1, 'special_key': 1},
                    2: {'identifier': 2, 'special_key': 2}}
    target = [{'identifier': 1, 'extra_key': 1, 'special_key': 1},
              {'identifier': 2, 'extra_key': 2, 'special_key': 2}]
    
    result = merge_on_subject(bids_example, demo_example)
    
    assert result == target
    
    
def test_merge_json(bids_json, demo_json):
    target_json = {'hasSamples': [
        {'identifier': 1, 'extra_key': 'one', 'special_key': 'one'},
        {'identifier': 2, 'extra_key': 'two', 'special_key': 'two'}
    ]
                   }
    result = merge_json(bids_json, demo_json)
    assert result == target_json